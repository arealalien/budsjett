@use "../abstracts/colors";
@use "../abstracts/font-face";
@use "../abstracts/mixins";
@use "../abstracts/utilities";
@use "sass:math";

body {
  width: 100%;
  color: mixins.hslac(colors.$clr-white, 1);
  font-family: utilities.$font-main;
  font-size: .85rem;
  background: mixins.hslac(colors.$clr-black, 1);
  @include mixins.lightMode {
    color: mixins.hslac(colors.$clr-black, 1);
    background-color: mixins.hslac(colors.$clr-white, 1);
  }
}
.view-width {
  width: utilities.$view-width !important;
}

em {
  font-weight: 700;
}

main {
  margin-top: utilities.$navbar-height;
  position: relative;
  gap: 1em;
  @include mixins.flex-col();
}

.round {
  aspect-ratio: 1 / 1;
  border-radius: 50%;
}

.button-primary {
  --font-size: .9rem;
  font-size: var(--font-size);
  padding: 1em 1.5em;
  color: mixins.hslac(colors.$clr-white, 1);
  background-color: mixins.hslac(colors.$clr-primary-500, 1);
  border: none;
  text-decoration: none;
  border-radius: 5em;
  gap: .5em;
  cursor: pointer;
  transition: opacity .15s cubic-bezier(utilities.$transition-smooth, 1);
  @include mixins.flex-center();

  &:disabled {
    opacity: .5;
    pointer-events: none;
  }
  span {

  }
  svg {
    width: 1.3em; height: 1.3em;
    path {
      stroke-width: .9;
      stroke: mixins.hslac(colors.$clr-white, 1);
    }
  }
}
.button-white {
  --font-size: .9rem;
  font-size: var(--font-size);
  padding: 1em 1.5em;
  color: mixins.hslac(colors.$clr-black, 1);
  background-color: mixins.hslac(colors.$clr-white, 1);
  border: none;
  text-decoration: none;
  border-radius: 5em;
  gap: .5em;
  cursor: pointer;
  transition: opacity .15s cubic-bezier(utilities.$transition-smooth, 1);
  @include mixins.flex-center();

  &:disabled {
    opacity: .5;
    pointer-events: none;
  }
  span {

  }
  svg {
    width: 1.3em; height: 1.3em;
    path {
      stroke-width: .9;
      stroke: mixins.hslac(colors.$clr-black, 1);
    }
  }
}
.button-blur {
  --font-size: .9rem;
  font-size: var(--font-size);
  padding: 1em 1.5em;
  color: mixins.hslac(colors.$clr-white, 1);
  background-color: mixins.hslac(colors.$clr-gray-800, .6);
  border: none;
  backdrop-filter: blur(3rem);
  text-decoration: none;
  border-radius: 5em;
  gap: .5em;
  cursor: pointer;
  transition: opacity .15s cubic-bezier(utilities.$transition-smooth, 1);
  @include mixins.flex-center();

  &:disabled {
    opacity: .5;
    pointer-events: none;
  }
  span {

  }
  svg {
    width: 1.3em; height: 1.3em;
    path {
      stroke-width: .9;
      stroke: mixins.hslac(colors.$clr-white, 1);
    }
  }
}

.ba-primary {
  background: mixins.hslac(colors.$clr-skyblue-500, 1);
  color: mixins.hslac(colors.$clr-white, 1);
  div {
    text-shadow: 0 var(--font-shadow) 0 mixins.hslac(colors.$clr-white, 1);
  }
}
.ba-white {
  background: mixins.hslac(colors.$clr-white, 1);
  color: mixins.hslac(colors.$clr-black, 1);
  div {
    text-shadow: 0 var(--font-shadow) 0 mixins.hslac(colors.$clr-black, 1);
  }
}
.ba-gray {
  background: mixins.hslac(colors.$clr-gray-900, 1);
  color: mixins.hslac(colors.$clr-white, 1);
  div {
    text-shadow: 0 var(--font-shadow) 0 mixins.hslac(colors.$clr-white, 1);
  }
}
.ba-purple {
  background: mixins.hslac(colors.$clr-purple-500, 1);
  color: mixins.hslac(colors.$clr-white, 1);
  div {
    text-shadow: 0 var(--font-shadow) 0 mixins.hslac(colors.$clr-white, 1);
  }
}
.ba-yellow {
  background: mixins.hslac(colors.$clr-yellow-500, 1);
  color: mixins.hslac(colors.$clr-white, 1);
  div {
    text-shadow: 0 var(--font-shadow) 0 mixins.hslac(colors.$clr-white, 1);
  }
}
.ba-deeppink {
  background: mixins.hslac(colors.$clr-deeppink-500, 1);
  color: mixins.hslac(colors.$clr-white, 1);
  div {
    text-shadow: 0 var(--font-shadow) 0 mixins.hslac(colors.$clr-white, 1);
  }
}
.ba-green {
  background: mixins.hslac(colors.$clr-lime-500, 1);
  color: mixins.hslac(colors.$clr-white, 1);
  div {
    text-shadow: 0 var(--font-shadow) 0 mixins.hslac(colors.$clr-white, 1);
  }
}
.button-animated {
  --font-size: .9rem;
  --duration: .3s;
  --font-shadow: calc(var(--font-size) + .1rem);
  appearance: none;
  padding: 1em 1.5em;
  font-size: var(--font-size);
  letter-spacing: .02em;
  font-weight: 500;
  text-decoration: none;
  line-height: calc(var(--font-size) + .12rem);
  border-radius: 1em;
  outline: none;
  border: none;
  cursor: pointer;
  transform: translateY(var(--y)) translateZ(0);
  transition: transform var(--duration) cubic-bezier(utilities.$transition-smooth, 1), box-shadow var(--duration) cubic-bezier(utilities.$transition-smooth, 1), opacity .15s cubic-bezier(utilities.$transition-smooth, 1);
  &:disabled {
    opacity: .5;
    pointer-events: none;
  }
  div {
    display: flex;
    overflow: hidden;
    span {
      display: block;
      backface-visibility: hidden;
      font-style: normal;
      transition: transform var(--duration) ease;
      transform: translateY(var(--m)) translateZ(0);
      $i: 1;
      @while $i < 22 {
        &:nth-child(#{$i}) {
          transition-delay: #{math.div($i, 60)}s;
        }
        $i: $i + 1;
      }
    }
  }
  &:hover {
    span {
      --m: calc(calc(var(--font-size) + .1rem) * -1);
    }
  }
  &.reverse {
    &:hover {
      span {
        --m: calc(var(--font-size));
      }
    }
  }
}


$shiny-cta-bg: mixins.hslac(colors.$clr-purple-900, 1);
$shiny-cta-bg-subtle: mixins.hslac(colors.$clr-purple-800, 1);
$shiny-cta-fg: mixins.hslac(colors.$clr-white, 1);
$shiny-cta-highlight: mixins.hslac(colors.$clr-purple-700, 1);
$shiny-cta-highlight-subtle: mixins.hslac(colors.$clr-purple-200, 1);

:root {
  --shiny-cta-bg: #{$shiny-cta-bg};
  --shiny-cta-bg-subtle: #{$shiny-cta-bg-subtle};
  --shiny-cta-fg: #{$shiny-cta-fg};
  --shiny-cta-highlight: #{$shiny-cta-highlight};
  --shiny-cta-highlight-subtle: #{$shiny-cta-highlight-subtle};
}

@property --gradient-angle {
  syntax: "<angle>";
  initial-value: 0deg;
  inherits: false;
}

@property --gradient-angle-offset {
  syntax: "<angle>";
  initial-value: 0deg;
  inherits: false;
}

@property --gradient-percent {
  syntax: "<percentage>";
  initial-value: 5%;
  inherits: false;
}

@property --gradient-shine {
  syntax: "<color>";
  initial-value: white;
  inherits: false;
}

.shiny-cta {
  --animation: gradient-angle linear infinite;
  --duration: 3s;
  --shadow-size: 2px;
  isolation: isolate;
  position: relative;
  overflow: hidden;
  cursor: pointer;
  outline-offset: 4px;
  padding: 1.25rem 2.5rem;
  font-family: inherit;
  font-size: utilities.$paragraph;
  line-height: 1.2;
  border: 1px solid transparent;
  border-radius: 1.2em;
  color: var(--shiny-cta-fg);
  background: linear-gradient(var(--shiny-cta-bg), var(--shiny-cta-bg))
  padding-box,
  conic-gradient(
          from calc(var(--gradient-angle) - var(--gradient-angle-offset)),
          transparent,
          var(--shiny-cta-highlight) var(--gradient-percent),
          var(--gradient-shine) calc(var(--gradient-percent) * 2),
          var(--shiny-cta-highlight) calc(var(--gradient-percent) * 3),
          transparent calc(var(--gradient-percent) * 4)
  )
  border-box;
  box-shadow: inset 0 0 0 1px var(--shiny-cta-bg-subtle);

  &::before,
  &::after,
  span::before {
    content: "";
    pointer-events: none;
    position: absolute;
    inset-inline-start: 50%;
    inset-block-start: 50%;
    translate: -50% -50%;
    z-index: -1;
  }

  &:active {
    translate: 0 1px;
  }
}

.shiny-cta::before {
  --size: calc(100% - var(--shadow-size) * 3);
  --position: 2px;
  --space: calc(var(--position) * 2);
  width: var(--size);
  height: var(--size);
  background: radial-gradient(
          circle at var(--position) var(--position),
          white calc(var(--position) / 4),
          transparent 0
  )
  padding-box;
  background-size: var(--space) var(--space);
  background-repeat: space;
  mask-image: conic-gradient(
          from calc(var(--gradient-angle) + 45deg),
          black,
          transparent 10% 90%,
          black
  );
  border-radius: inherit;
  opacity: 0.4;
  z-index: -1;
}

.shiny-cta::after {
  --animation: shimmer linear infinite;
  width: 100%;
  aspect-ratio: 1;
  background: linear-gradient(
          -50deg,
          transparent,
          var(--shiny-cta-highlight),
          transparent
  );
  mask-image: radial-gradient(circle at bottom, transparent 40%, black);
  opacity: 0.6;
}

.shiny-cta span {
  z-index: 1;

  &::before {
    --size: calc(100% + 1rem);
    width: var(--size);
    height: var(--size);
    box-shadow: inset 0 -1ex 2rem 4px var(--shiny-cta-highlight);
    opacity: 0;
  }
}

/* Animate */
.shiny-cta {
  --transition: 800ms cubic-bezier(0.25, 1, 0.5, 1);
  transition: var(--transition);
  transition-property: --gradient-angle-offset, --gradient-percent,
  --gradient-shine;

  &,
  &::before,
  &::after {
    animation: var(--animation) var(--duration),
    var(--animation) calc(var(--duration) / 0.4) reverse paused;
    animation-composition: add;
  }

  span::before {
    transition: opacity var(--transition);
    animation: calc(var(--duration) * 1.5) breathe linear infinite;
  }
}

.shiny-cta:is(:hover, :focus-visible) {
  --gradient-percent: 20%;
  --gradient-angle-offset: 95deg;
  --gradient-shine: var(--shiny-cta-highlight-subtle);

  &,
  &::before,
  &::after {
    animation-play-state: running;
  }

  span::before {
    opacity: 1;
  }
}

@keyframes gradient-angle {
  to {
    --gradient-angle: 360deg;
  }
}

@keyframes shimmer {
  to {
    rotate: 360deg;
  }
}

@keyframes breathe {
  from,
  to {
    scale: 1;
  }
  50% {
    scale: 1.2;
  }
}


@supports (-webkit-appearance: none) or (-moz-appearance: none) {
  input[type='checkbox'].check-purple, input[type='radio'].check-purple {
    --active: #{mixins.hslac(colors.$clr-purple-500, 1)};
    --focus: 2px #{mixins.hslac(colors.$clr-purple-500, 0.3)};
    --border-hover: #{mixins.hslac(colors.$clr-purple-500, 1)};
  }
  input[type='checkbox'].check-yellow, input[type='radio'].check-yellow {
    --active: #{mixins.hslac(colors.$clr-yellow-500, 1)};
    --focus: 2px #{mixins.hslac(colors.$clr-yellow-500, 0.3)};
    --border-hover: #{mixins.hslac(colors.$clr-yellow-500, 1)};
  }
  input[type='checkbox'].check-deeppink, input[type='radio'].check-deeppink {
    --active: #{mixins.hslac(colors.$clr-deeppink-500, 1)};
    --focus: 2px #{mixins.hslac(colors.$clr-deeppink-500, 0.3)};
    --border-hover: #{mixins.hslac(colors.$clr-deeppink-500, 1)};
  }
  input[type='checkbox'].check-FURNITURE, input[type='radio'].check-FURNITURE {
    --active: #{colors.$clr-furniture};
    --focus: 2px #{rgba(colors.$clr-furniture, 0.3)};
    --border-hover: #{colors.$clr-furniture};
  }
  input[type='checkbox'].check-GROCERIES, input[type='radio'].check-GROCERIES {
    --active: #{colors.$clr-groceries};
    --focus: 2px #{rgba(colors.$clr-groceries, 0.3)};
    --border-hover: #{colors.$clr-groceries};
  }
  input[type='checkbox'].check-TAKEAWAY, input[type='radio'].check-TAKEAWAY {
    --active: #{colors.$clr-takeaway};
    --focus: 2px #{rgba(colors.$clr-takeaway, 0.3)};
    --border-hover: #{colors.$clr-takeaway};
  }
  input[type='checkbox'].check-RESTAURANT, input[type='radio'].check-RESTAURANT {
    --active: #{colors.$clr-restaurant};
    --focus: 2px #{rgba(colors.$clr-restaurant, 0.3)};
    --border-hover: #{colors.$clr-restaurant};
  }
  input[type='checkbox'].check-HOUSEHOLD, input[type='radio'].check-HOUSEHOLD {
    --active: #{colors.$clr-household};
    --focus: 2px #{rgba(colors.$clr-household, 0.3)};
    --border-hover: #{colors.$clr-household};
  }
  input[type='checkbox'].check-SUBSCRIPTIONS, input[type='radio'].check-SUBSCRIPTIONS {
    --active: #{colors.$clr-subscriptions};
    --focus: 2px #{rgba(colors.$clr-subscriptions, 0.3)};
    --border-hover: #{colors.$clr-subscriptions};
  }
  input[type='checkbox'].check-OTHER, input[type='radio'].check-OTHER {
    --active: #{colors.$clr-other};
    --focus: 2px #{rgba(colors.$clr-other, 0.3)};
    --border-hover: #{colors.$clr-other};
  }
  input[type='checkbox'],
  input[type='radio'] {
    --active: #{mixins.hslac(colors.$clr-skyblue-500, 1)};
    --active-inner: #{mixins.hslac(colors.$clr-white, 1)};
    --focus: 2px #{mixins.hslac(colors.$clr-skyblue-500, 0.3)};
    --border: #{mixins.hslac(colors.$clr-gray-700, 1)};
    --border-hover: #{mixins.hslac(colors.$clr-skyblue-500, 1)};
    --background: #{mixins.hslac(colors.$clr-black, .5)};
    --disabled: #{mixins.hslac(colors.$clr-gray-900, 1)};
    --disabled-inner: #{mixins.hslac(colors.$clr-gray-800, 1)};
    -webkit-appearance: none;
    -moz-appearance: none;
    height: 21px;
    outline: none;
    display: inline-block;
    vertical-align: top;
    position: relative;
    margin: 0;
    cursor: pointer;
    border: 1px solid var(--bc, var(--border));
    background: var(--b, var(--background));
    transition: background .3s, border-color .3s, box-shadow .2s;
    &:after {
      content: '';
      display: block;
      left: 0;
      top: 0;
      position: absolute;
      transition: transform var(--d-t, .3s) cubic-bezier(utilities.$transition-smooth, 1),
      opacity var(--d-o, .2s);
    }
    &:checked {
      --b: var(--active);
      --bc: var(--active);
      --d-o: .1s;
      --d-t: .3s;
    }
    &:disabled {
      --b: var(--disabled);
      cursor: not-allowed;
      opacity: .9;
      &:checked {
        --b: var(--disabled-inner);
        --bc: var(--border);
      }
      & + label {
        cursor: not-allowed;
      }
    }
    &:hover {
      &:not(:checked) {
        &:not(:disabled) {
          --bc: var(--border-hover);
        }
      }
    }
    &:focus {
      box-shadow: 0 0 0 var(--focus);
    }
    &:not(.switch) {
      width: 21px;
      &:after {
        opacity: var(--o, 0);
      }
      &:checked {
        --o: 1;
      }
    }
    & + label {
      font-size: 14px;
      line-height: 21px;
      display: inline-block;
      vertical-align: top;
      cursor: pointer;
      margin-left: 4px;
    }
  }
  input[type='checkbox'] {
    &:not(.switch) {
      border-radius: 7px;
      &:after {
        width: 5px;
        height: 9px;
        border: 2px solid var(--active-inner);
        border-top: 0;
        border-left: 0;
        left: 7px;
        top: 4px;
        transform: rotate(var(--r, 43deg));
      }
      &:checked {
        --r: 43deg;
      }
    }
    &.switch {
      width: 38px;
      border-radius: 11px;
      &:after {
        left: 2px;
        top: 2px;
        border-radius: 50%;
        width: 15px;
        height: 15px;
        background: var(--ab, var(--border));
        transform: translateX(var(--x, 0));
      }
      &:checked {
        --ab: var(--active-inner);
        --x: 17px;
      }
      &:disabled {
        &:not(:checked) {
          &:after {
            opacity: .6;
          }
        }
      }
    }
  }
  input[type='radio'] {
    border-radius: 50%;
    &:after {
      width: 19px;
      height: 19px;
      border-radius: 50%;
      background: var(--active-inner);
      opacity: 0;
      transform: scale(var(--s, .7));
    }
    &:checked {
      --s: .5;
    }
  }
}

label {
  user-select: none;
}

.error {
  color: mixins.hslac(colors.$clr-red-500, 1);
}

.loader {
  width: 100%; height: calc(100vh - utilities.$navbar-height);
  @include mixins.flex-center();
}
.spinner svg {
  animation: loading-rotate 2.2s linear infinite;
  height: 42px;
  width: 42px;
}
.spinner .path {
  stroke-dasharray: 90, 150;
  stroke-dashoffset: 0;
  stroke-width: 3;
  stroke: mixins.hslac(colors.$clr-white, 1);
  stroke-linecap: round;
  animation: loading-dash 1.6s ease-in-out infinite;
}
@keyframes loading-rotate {
  to {
    transform: rotate(1turn);
  }
}
@keyframes loading-dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -40px;
  }
  to {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -120px;
  }
}

::selection {
  color: mixins.hslac(colors.$clr-black, 1);
  background: mixins.hslac(colors.$clr-white, 1);
}

::-webkit-scrollbar-track {
  background-color: mixins.hslac(colors.$clr-black, 1);
}
::-webkit-scrollbar {
  width: 8px;
  background-color: mixins.hslac(colors.$clr-black, 1);
}
::-webkit-scrollbar-thumb {
  background-color: mixins.hslac(colors.$clr-white, .7);
  border-radius: 1em;
}
::-webkit-scrollbar-thumb:hover {
  background-color: mixins.hslac(colors.$clr-white, .9);
}